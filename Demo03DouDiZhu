import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/*
    斗地主综合案例：有序版本
    1.准备牌
    2.洗牌
    3.发牌
    4.排序
    5.看牌
 */
public class DouDiZhu {
    public static void main(String[] args) {
        /*
            1.准备牌
         */
        // 创建一个Map集合，存储牌的索引和组装完成的牌
        HashMap<Integer,String> poker = new HashMap<>();
        // 创建一个list集合，存储牌的索引
        ArrayList<Integer> pokerIndex = new ArrayList<>();
        // 定义两个集合，存储花色和牌的序号
        ArrayList<String> colors = new ArrayList<>();
        ArrayList<String> numbers = new ArrayList<>();
        Collections.addAll(colors, "♥","♠","♣","♦");
        Collections.addAll(numbers, "2","A","K","Q","J","10","9","8","7","6","5","4","3");
        // 把大小王存储到集合中
        int index = 0;
        poker.put(index,"大王");
        pokerIndex.add(index);
        index++;
        poker.put(index,"小王");
        pokerIndex.add(index);
        index++;
        // 循环遍历两个集合，组装52张牌
        for(String number : numbers) {
            for(String color : colors) {
                poker.put(index,color+number);
                pokerIndex.add(index);
                index++;
            }
        }
//        System.out.println(poker);
//        System.out.println(pokerIndex);

        /*
            2.洗牌
         */
        Collections.shuffle(pokerIndex);
//        System.out.println(pokerIndex);

        /*
            3.发牌
         */
        // 定义四个集合，存储玩家牌和底牌的索引
        ArrayList<Integer> player01 = new ArrayList<>();
        ArrayList<Integer> player02 = new ArrayList<>();
        ArrayList<Integer> player03 = new ArrayList<>();
        ArrayList<Integer> dipai = new ArrayList<>();
        // 遍历集合，获取每个牌的索引
        for (int i = 0; i < pokerIndex.size(); i++) {
            Integer in = pokerIndex.get(i);
            // 先判断底牌
            if(i >= 51) {
                // 给底牌发牌
                dipai.add(in);
            }else if(i % 3 == 0) {
                // 玩家1发牌
                player01.add(in);
            }else if(i % 3 == 1) {
                // 玩家2发牌
                player02.add(in);
            }else if(i % 3 == 2) {
                // 玩家3发牌
                player03.add(in);
            }
        }

        /*
            4.排序
         */
        Collections.sort(player01);
        Collections.sort(player02);
        Collections.sort(player03);
        Collections.sort(dipai);

        /*
             5.看牌
         */
        lookPoker("太宰",poker,player01);
        lookPoker("芥川",poker,player02);
        lookPoker("中也",poker,player03);
        lookPoker("底牌",poker,dipai);
    }
     /*
            定义一个看牌方法，提高代码复用性
            参数：
                String name: 玩家名称
                HashMap<Integer,String> poker：存储牌的组合
                ArrayList<Integer> list: 存储玩家和底牌的List集合
            查表法：
                遍历玩家或底牌集合, 获得牌索引
                使用索引，到poker中找到对应的牌
         */
    public static void lookPoker(String name,
                                 HashMap<Integer,String> poker,
                                 ArrayList<Integer> list) {
        // 输出玩家名称,不换行
        System.out.print(name+": ");
        // 遍历玩家或底牌集合
        for (Integer key : list) {
            // 使用索引，到poker中找到对应的牌
            String value = poker.get(key);
            System.out.print(value+" ");
        }
        System.out.println();
    }
}
